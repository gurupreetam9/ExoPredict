/**
 * @fileoverview Firestore Security Rules for ExoPredict application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and predictions,
 * while allowing public read access to the model metadata.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Only the user can read/write their profile.
 * - /models/{modelId}: Stores machine learning model metadata. Publicly readable.
 * - /users/{userId}/predictions/{predictionId}: Stores prediction results for a user. Only the user can read/write their predictions.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Model metadata is publicly readable.
 * - Users can only access their own prediction data.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - Predictions are stored under the user's path (/users/{userId}/predictions/{predictionId}) to allow path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Signed-in user creating their own profile.
     * @allow (get, update, delete) Signed-in user accessing their own profile.
     * @deny (get, list, create, update, delete) Any other user attempting to access this profile.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree. Validates relational integrity between documents.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.

      // Allow the user to create their own profile, but only if the userId matches their auth UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only the owner can update/delete their profile. Ensure the document exists before allowing the operation.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to machine learning model metadata.
     * @path /models/{modelId}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) No write access allowed.
     * @principle Grants public read access to model metadata while restricting write access.
     */
    match /models/{modelId} {
      allow get, list: if true;

      // No write access allowed for models.
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to prediction data for each user.
     * @path /users/{userId}/predictions/{predictionId}
     * @allow (create) Signed-in user creating a prediction under their own user ID.
     * @allow (get, list, update, delete) Signed-in user accessing their own predictions.
     * @deny (get, list, create, update, delete) Any other user attempting to access these predictions.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree. Validates relational integrity between documents.
     */
    match /users/{userId}/predictions/{predictionId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document based on userId path.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Only the owner can update/delete their predictions. Ensure the document exists before allowing the operation.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability
      allow delete: if isExistingOwner(userId);
    }
  }
}